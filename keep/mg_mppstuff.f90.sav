!&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
                        module mg_mppstuff
!***********************************************************************
!                                                                      !
!    Everything related to mpi communication                           !
!                                                                      !
! Library: mpi                                                         !
! Modules: kinds, mg_parameter                                         !
!                                                     M. Rancic (2020) !
!***********************************************************************
use kinds, only: i_kind
use mg_parameter
implicit none

character(len=3):: c_mype
integer(i_kind)::mype,mpi_comm_world
integer(i_kind) npes,iTYPE,rTYPE,dTYPE,mpi_comm_comp,ierr,ierror

integer(i_kind) my_hgen
integer(i_kind) mype_hgen
logical:: l_hgen
integer(i_kind):: nx,my,ns,ms,ninc,minc,ninc2,minc2


public init_mg_MPI,finishMPI,barrierMPI

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                        contains
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

!&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
                        subroutine init_mg_MPI
!***********************************************************************
!                                                                      !
!     Initialize mpi                                                   !
!     Create group for filter grid                                     !
!                                                                      !
!***********************************************************************
use mpi


implicit none
integer(i_kind):: g,m
!-----------------------------------------------------------------------

           mpi_comm_comp=MPI_COMM_WORLD
!***
!***  Initial MPI calls
!***
      call MPI_INIT(ierr)
      call MPI_COMM_RANK(mpi_comm_comp,mype,ierr)
      call MPI_COMM_SIZE(mpi_comm_comp,npes,ierr)

      rTYPE = MPI_REAL
      dTYPE = MPI_DOUBLE
      iTYPE = MPI_INTEGER


!***
!*** Analysis grid
!***

    nx = mod(mype,nxm)+1
    my = (mype/nxm)+1

    if(nx==1) then
       ns=0
       ninc=1
       ninc2=2
    else 
       ns=1
       ninc=0
       ninc2=1
    endif

    if(my==1) then
       ms=0
       minc=1
       minc2=2
    else 
       ms=1
       minc=0
       minc2=1
    endif


!***
!***  Define PEs that handle high generations
!***

   
      mype_hgen=-1
      my_hgen=-1

      if( mype < maxpe_filt-nxy(1)) then
        mype_hgen=mype+nxy(1)
      endif
      do g=1,gm
        if(maxpe_fgen(g-1)<= mype_hgen .and. mype_hgen< maxpe_fgen(g)) then
            my_hgen=g
         endif
      enddo
      l_hgen = mype_hgen >-1

!TEST
!      write(600+mype,*)'mype,my_hgen,l_gen,mype_hgen=',mype,my_hgen,l_hgen,mype_hgen
!TEST

!***
!***  Chars
!***
      write(c_mype,1000) mype
 1000 format(i3.3)


!-----------------------------------------------------------------------
!
      call MPI_BARRIER(mpi_comm_comp,ierr)
!
!-----------------------------------------------------------------------
                        endsubroutine init_mg_MPI

!&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
                        subroutine barrierMPI
!***********************************************************************
!                                                                      !
!     Call barrier for all                                             !
!                                                                      !
!***********************************************************************
use mpi

implicit none
integer:: ierr
!-----------------------------------------------------------------------

      call MPI_BARRIER(mpi_comm_comp,ierr)

!-----------------------------------------------------------------------
                        endsubroutine barrierMPI

!&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
                        subroutine finishMPI
!***********************************************************************
!                                                                      !
!     Finalize MPI                                                     !
!                                                                      !
!***********************************************************************
use mpi

implicit none
integer:: ierr

!-----------------------------------------------------------------------
!
      call MPI_FINALIZE(ierr)
      stop
!
!-----------------------------------------------------------------------
                        endsubroutine finishMPI

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                        endmodule mg_mppstuff

